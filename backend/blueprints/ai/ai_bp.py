from flask import Blueprint, request, jsonify, session
from flasgger import swag_from
from models import db, Test
import json
from utils.gemini import generate_test as generate_test_func

ai_bp = Blueprint('ai_bp', __name__)

def clean_gemini_response(response_text):
    """
    Removes markdown code block markers (e.g., ```json) from the Gemini response.
    """
    lines = response_text.splitlines()
    if lines and lines[0].strip().startswith("```"):
        lines = lines[1:]
    if lines and lines[-1].strip().startswith("```"):
        lines = lines[:-1]
    return "\n".join(lines).strip()

@swag_from({
    'tags': ['AI Test Generation'],
    'parameters': [
        {
            'name': 'body',
            'in': 'body',
            'description': 'Parameters for generating a custom test',
            'required': True,
            'schema': {
                'type': 'object',
                'properties': {
                    'topic': {'type': 'string', 'example': 'Physics'},
                    'difficulty': {'type': 'string', 'example': 'medium'},
                    'num_questions': {'type': 'integer', 'example': 5}
                },
                'required': ['topic', 'difficulty', 'num_questions']
            }
        }
    ],
    'responses': {
        '201': {
            'description': 'Test generated successfully',
            'schema': {
                'type': 'object',
                'properties': {
                    'message': {'type': 'string', 'example': 'Test generated successfully'},
                    'test': {'type': 'object'}
                }
            }
        },
        '401': {
            'description': 'Unauthorized',
            'schema': {
                'type': 'object',
                'properties': {
                    'error': {'type': 'string', 'example': 'Unauthorized'}
                }
            }
        },
        '500': {
            'description': 'Test generation failed',
            'schema': {
                'type': 'object',
                'properties': {
                    'error': {'type': 'string', 'example': 'Failed to generate test'},
                    'details': {'type': 'string'}
                }
            }
        }
    }
})
@ai_bp.route('/generate_test', methods=['POST'])
def generate_test_route():
    # Ensure the user is logged in
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 401

    data = request.get_json()
    topic = data.get('topic')
    difficulty = data.get('difficulty')
    num_questions = data.get('num_questions')

    if not topic or not difficulty or not num_questions:
        return jsonify({'error': 'Missing required parameters'}), 400

    try:
        test_json_str = generate_test_func(topic, difficulty, num_questions)

        print("Raw Gemini response:\n", test_json_str)

        test_json_str = clean_gemini_response(test_json_str)
        print("Cleaned Gemini response:\n", test_json_str)

        test_data = json.loads(test_json_str)

        new_test = Test(
            user_id=session['user_id'],
            topic=topic,
            difficulty=difficulty,
            num_questions=num_questions,
            test_data=test_data
        )
        db.session.add(new_test)
        db.session.commit()

        return jsonify({'message': 'Test generated successfully', 'test': test_data}), 201

    except json.JSONDecodeError as e:
        print("JSON parsing error:", e)
        return jsonify({'error': 'Failed to parse test data', 'details': str(e)}), 500

    except Exception as e:
        print("General error during test generation:", e)
        return jsonify({'error': 'Failed to generate test', 'details': str(e)}), 500




@swag_from({
    'tags': ['AI Test Generation'],
    'responses': {
        '200': {
            'description': "List of tests generated by the user",
            'schema': {
                'type': 'object',
                'properties': {
                    'tests': {
                        'type': 'array',
                        'items': {'type': 'object'}
                    }
                }
            }
        },
        '401': {
            'description': 'Unauthorized',
            'schema': {
                'type': 'object',
                'properties': {
                    'error': {'type': 'string', 'example': 'Unauthorized'}
                }
            }
        }
    }
})
@ai_bp.route('/my_tests', methods=['GET'])
def get_my_tests():
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 401

    user_tests = Test.query.filter_by(user_id=session['user_id']).all()
    tests_list = []
    for test in user_tests:
        tests_list.append({
            'id': test.id,
            'topic': test.topic,
            'difficulty': test.difficulty,
            'num_questions': test.num_questions,
            'created_at': test.created_at
        })

    return jsonify({'tests': tests_list}), 200

@swag_from({
    'tags': ['AI Test Generation'],
    'parameters': [
        {
            'name': 'test_id',
            'in': 'path',
            'type': 'integer',
            'required': True,
            'description': 'ID of the test to retrieve'
        }
    ],
    'responses': {
        '200': {
            'description': 'Test retrieved successfully',
            'schema': {
                'type': 'object',
                'properties': {
                    'id': {'type': 'integer', 'example': 1},
                    'topic': {'type': 'string', 'example': 'Physics'},
                    'difficulty': {'type': 'string', 'example': 'medium'},
                    'num_questions': {'type': 'integer', 'example': 5},
                    'test_data': {'type': 'object'},
                    'created_at': {'type': 'string', 'example': '2025-03-10T22:00:00'}
                }
            }
        },
        '401': {
            'description': 'Unauthorized',
            'schema': {
                'type': 'object',
                'properties': {
                    'error': {'type': 'string', 'example': 'Unauthorized'}
                }
            }
        },
        '403': {
            'description': 'Forbidden: test does not belong to user',
            'schema': {
                'type': 'object',
                'properties': {
                    'error': {'type': 'string', 'example': 'Forbidden'}
                }
            }
        },
        '404': {
            'description': 'Test not found',
            'schema': {
                'type': 'object',
                'properties': {
                    'error': {'type': 'string', 'example': 'Test not found'}
                }
            }
        }
    }
})
@ai_bp.route('/test/<int:test_id>', methods=['GET'])
def get_single_test(test_id):
    if 'user_id' not in session:
        return jsonify({'error': 'Unauthorized'}), 401

    test = Test.query.get(test_id)
    if not test:
        return jsonify({'error': 'Test not found'}), 404

    if test.user_id != session['user_id']:
        return jsonify({'error': 'Forbidden'}), 403

    test_info = {
        'id': test.id,
        'topic': test.topic,
        'difficulty': test.difficulty,
        'num_questions': test.num_questions,
        'test_data': test.test_data,
        'created_at': test.created_at
    }

    return jsonify(test_info), 200
